name = "aave-v3-pool"
version = "<%= package.version %>"
description = "Aave's v3 Pool contract, main point of interaction with an Aave protocol's market"

[setting.marketId]
defaultValue = "Aave Ethereum Market"

[setting.owner]
defaultValue = "0xc783df8a850f42e7F7e57013759C285caa701eB6" # Hardhat's first address (Swap this out when deploying to a different network)

# `salt` here only affects proxy contract
[setting.salt]
description = "Change this to a unique string when deploying multiple instances of the system. Note that only the proxy contract will be unique."
defaultValue = "aave-v3-pool-eth"

# Libraries
[contract.ReserveConfiguration]
artifact = 'contracts/protocol/libraries/configuration/ReserveConfiguration.sol:ReserveConfiguration'

[contract.PoolLogic]
artifact = 'contracts/protocol/libraries/logic/PoolLogic.sol:PoolLogic'

[contract.ReserveLogic]
artifact = 'contracts/protocol/libraries/logic/ReserveLogic.sol:ReserveLogic'

[contract.EModeLogic]
artifact = 'contracts/protocol/libraries/logic/EModeLogic.sol:EModeLogic'

[contract.SupplyLogic]
artifact = 'contracts/protocol/libraries/logic/SupplyLogic.sol:SupplyLogic'

[contract.BorrowLogic]
artifact = 'contracts/protocol/libraries/logic/BorrowLogic.sol:BorrowLogic'

[contract.FlashLoanLogic]
artifact = 'contracts/protocol/libraries/logic/FlashLoanLogic.sol:FlashLoanLogic'

libraries.BorrowLogic = "<%= contracts.BorrowLogic.address %>"
depends = ["contract.BorrowLogic"]

[contract.LiquidationLogic]
artifact = 'contracts/protocol/libraries/logic/LiquidationLogic.sol:LiquidationLogic'

[contract.DataTypes]
artifact = 'contracts/protocol/libraries/types/DataTypes.sol:DataTypes'

[contract.BridgeLogic]
artifact = 'contracts/protocol/libraries/logic/BridgeLogic.sol:BridgeLogic'


[contract.PoolAddressesProvider]
artifact = "contracts/protocol/configuration/PoolAddressesProvider.sol:PoolAddressesProvider"
args = [
  "<%= settings.marketId %>", # string memory marketId
  "<%= settings.owner %>" # address owner
]

[contract.Proxy]
artifact = "contracts/protocol/libraries/aave-upgradeability/InitializableImmutableAdminUpgradeabilityProxy.sol:InitializableImmutableAdminUpgradeabilityProxy"
args = ["<%= settings.owner %>"]
salt = "<%= settings.salt %>"
create2 = true


[contract.Pool]
artifact = "contracts/protocol/pool/Pool.sol:Pool"
from = "<%= settings.owner %>"
args = ["<%= contracts.PoolAddressesProvider.address %>"]

libraries.BorrowLogic = "<%= contracts.BorrowLogic.address %>"
libraries.ReserveConfiguration = "<%= contracts.ReserveConfiguration.address %>"
libraries.PoolLogic = "<%= contracts.PoolLogic.address %>"
libraries.ReserveLogic = "<%= contracts.ReserveLogic.address %>"
libraries.EModeLogic = "<%= contracts.EModeLogic.address %>"
libraries.SupplyLogic = "<%= contracts.SupplyLogic.address %>"
libraries.FlashLoanLogic = "<%= contracts.FlashLoanLogic.address %>"
libraries.LiquidationLogic = "<%= contracts.LiquidationLogic.address %>"
libraries.DataTypes = "<%= contracts.DataTypes.address %>"
libraries.BridgeLogic = "<%= contracts.BridgeLogic.address %>"

depends = [
  "contract.PoolAddressesProvider", 
  "contract.ReserveConfiguration",
  "contract.PoolLogic",
  "contract.ReserveLogic",
  "contract.EModeLogic",
  "contract.SupplyLogic",
  "contract.FlashLoanLogic",
  "contract.LiquidationLogic",
  "contract.DataTypes",
  "contract.BridgeLogic"
]

[invoke.upgrade_proxy]
target = ["Proxy"]
from = "<%= settings.owner %>"
func = "upgradeTo"
args = ["<%= contracts.Pool.address %>"]

depends = [
  "contract.Proxy",
  "contract.Pool"
]